/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Model;

import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Nico
 */
public class Data2 {
    private final List<List<String>> algoritmos;
    private final List<List<List<String>>> pasos;
    
    public Data2() {
        this.algoritmos = new ArrayList<>();
        this.pasos = new ArrayList<>();
        CreateList();
    }
    
    private void CreateList(){
        for(int i = 0; i < 101; i++){
            this.algoritmos.add(new ArrayList<>());
            this.pasos.add(new ArrayList<>());
            this.pasos.get(i).add(new ArrayList<>());
            this.pasos.get(i).add(new ArrayList<>());
        }
        ////////////////   76    /////////////////
        this.algoritmos.get(1).add("#|\nConstruir un algoritmo en Lisp que almacene\nla seria de fibonacci en un vector. \n|#");
        this.algoritmos.get(1).add("Funcion FibonacciVector\n    inicializar numeros = hacer-vector 1 (0)\n    inicializar n1 = 0\n    inicializar n2 = 1\n    inicializar n3 = 0\n    agregar(nuemro, n2)\n    desde i = 0 hasta 10 hacer:\n           n3 = n1 + n2\n           agregar(nuemro, n3)\n           imprimir n3\n           n1 = n2\n           n2 = n3\n    imprimir \"El vector es: \", nuemros\n    \nllamar Funcion FibonacciVector");
        this.algoritmos.get(1).add("(defun FibonacciVector()\n    (setq nuemros (make-vector 1 (0)))\n    (setq n1 0)\n    (setq n2 1)\n    (setq n3 0)\n    (append numeros n2)\n    (println n2)\n    (loop for i from 0 to 10\n        do(set n3 (+ n1 n2))\n        do(append numeros n3)\n        do(set n1 n2)\n        do(set n2 n3)\n	)\n    (print \"El vector es: ~d\" nuemros)\n)\n\n(FibonacciVector)");
        this.algoritmos.get(1).add("75");
        this.pasos.get(1).get(0).add("Llamado");
        this.pasos.get(1).get(0).add("Funcion");
        this.pasos.get(1).get(0).add("Asignación");
        this.pasos.get(1).get(0).add("hacervector");
        this.pasos.get(1).get(0).add("Asignación");
        this.pasos.get(1).get(0).add("Asignación");
        this.pasos.get(1).get(0).add("Asignación");
        this.pasos.get(1).get(0).add("añadir");
        this.pasos.get(1).get(0).add("Impresión");
        this.pasos.get(1).get(0).add("for");
        this.pasos.get(1).get(0).add("Actualizar");
        this.pasos.get(1).get(0).add("añadir");
        this.pasos.get(1).get(0).add("Actualizar");
        this.pasos.get(1).get(0).add("Actualizar");
        this.pasos.get(1).get(0).add("for");
        this.pasos.get(1).get(0).add("Actualizar");
        this.pasos.get(1).get(0).add("añadir");
        this.pasos.get(1).get(0).add("Actualizar");
        this.pasos.get(1).get(0).add("Actualizar");
        this.pasos.get(1).get(0).add("for");
        this.pasos.get(1).get(0).add("Actualizar");
        this.pasos.get(1).get(0).add("añadir");
        this.pasos.get(1).get(0).add("Actualizar");
        this.pasos.get(1).get(0).add("Actualizar");
        this.pasos.get(1).get(0).add("Impresión");
        /////////////////////////////////
        this.pasos.get(1).get(1).add("(FibonacciVector)");
        this.pasos.get(1).get(1).add("(defun FibonacciVector()");
        this.pasos.get(1).get(1).add("(setq nuemros (make-vector 1 (0)))");
        this.pasos.get(1).get(1).add("(setq n1 0)");
        this.pasos.get(1).get(1).add("(setq n2 1)");
        this.pasos.get(1).get(1).add("(setq n3 0)");
        this.pasos.get(1).get(1).add("(append numeros n2)");
        this.pasos.get(1).get(1).add("(println n2)");
        this.pasos.get(1).get(1).add("(loop for i from 0 to 10");
        this.pasos.get(1).get(1).add("do(set n3 (+ n1 n2))");
        this.pasos.get(1).get(1).add("do(append numeros n3)");
        this.pasos.get(1).get(1).add("do(set n1 n2)");
        this.pasos.get(1).get(1).add("do(set n2 n3)");
        this.pasos.get(1).get(1).add("(loop for i from 0 to 10");
        this.pasos.get(1).get(1).add("do(set n3 (+ n1 n2))");
        this.pasos.get(1).get(1).add("do(append numeros n3)");
        this.pasos.get(1).get(1).add("do(set n1 n2)");
        this.pasos.get(1).get(1).add("do(set n2 n3)");
        this.pasos.get(1).get(1).add("(loop for i from 0 to 10");
        this.pasos.get(1).get(1).add("do(set n3 (+ n1 n2))");
        this.pasos.get(1).get(1).add("do(append numeros n3)");
        this.pasos.get(1).get(1).add("do(set n1 n2)");
        this.pasos.get(1).get(1).add("do(set n2 n3)");
        this.pasos.get(1).get(1).add("(print \"El vector es: ~d\" nuemros)")
        ;////////////////   77    /////////////////
        this.algoritmos.get(2).add("#|\nConstruir un algoritmo en Lisp que sume\ntodos  los  números primos  de un vector\npreviamente  llenado  con   numeros   del \n1 al 10.\n|#");
        this.algoritmos.get(2).add("Funcion SumaPrimosVector\n    inicializar nuemros = hacer-vector(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    inicializar sum = 0\n    desde i = 1 hasta 10 hacer:\n        desde j = 1 hasta 10 hacer:\n            si (modulo(nuemros[i], j) != 0)\n                sum = sum + nuemros[i]\n    imprimir \"Suma primos: \", sum\n\nllamar Funcion SumaPrimosVector");
        this.algoritmos.get(2).add("(defun SumaPrimosVector()\n (setq nuemros \n    (1 2 3 4 5 6 7 8 9 10)\n  )\n  (setq sum 0)\n  (loop for i from 1 to 10\n    do(loop for j from 1 to 10\n      do(if(!= remainder((vector-ref nuemros i)j)0)\n          (set sum (+ sum (vector-ref nuemros i)))\n        )\n     )\n   )\n   (print \"Suma primos: ~d\" sum)\n)\n\n(SumaPrimosVector)");
        this.algoritmos.get(2).add("76");
        this.pasos.get(2).get(0).add("Llamado");
        this.pasos.get(2).get(0).add("Funcion");
        this.pasos.get(2).get(0).add("Asignación");
        this.pasos.get(2).get(0).add("Asignación");
        this.pasos.get(2).get(0).add("for");
        this.pasos.get(2).get(0).add("for");
        this.pasos.get(2).get(0).add("Condicional");
        this.pasos.get(2).get(0).add("Actualizar");
        this.pasos.get(2).get(0).add("for");
        this.pasos.get(2).get(0).add("for");
        this.pasos.get(2).get(0).add("Condicional");
        this.pasos.get(2).get(0).add("Actualizar");
        this.pasos.get(2).get(0).add("for");
        this.pasos.get(2).get(0).add("for");
        this.pasos.get(2).get(0).add("Condicional");
        this.pasos.get(2).get(0).add("Actualizar");
        this.pasos.get(2).get(0).add("Impresión");
        /////////////////////////////////
        this.pasos.get(2).get(1).add("(SumaPrimosVector)");
        this.pasos.get(2).get(1).add("(defun SumaPrimosVector()");
        this.pasos.get(2).get(1).add("(setq nuemros ");
        this.pasos.get(2).get(1).add("(setq sum 0)");
        this.pasos.get(2).get(1).add("(loop for i from 1 to 10");
        this.pasos.get(2).get(1).add("do(loop for j from 1 to 10");
        this.pasos.get(2).get(1).add("do(if(!= remainder((vector-ref nuemros i)j)0)");
        this.pasos.get(2).get(1).add("(set sum (+ sum (vector-ref nuemros i)))");
        this.pasos.get(2).get(1).add("(loop for i from 1 to 10");
        this.pasos.get(2).get(1).add("do(loop for j from 1 to 10");
        this.pasos.get(2).get(1).add("do(if(!= remainder((vector-ref nuemros i)j)0)");
        this.pasos.get(2).get(1).add("(set sum (+ sum (vector-ref nuemros i)))");
        this.pasos.get(2).get(1).add("(loop for i from 1 to 10");
        this.pasos.get(2).get(1).add("do(loop for j from 1 to 10");
        this.pasos.get(2).get(1).add("do(if(!= remainder((vector-ref nuemros i)j)0)");
        this.pasos.get(2).get(1).add("(set sum (+ sum (vector-ref nuemros i)))");
        this.pasos.get(2).get(1).add("(print \"Suma primos: ~d\" sum)")
        ;////////////////   78    /////////////////
        this.algoritmos.get(3).add("#|\nConstruir un algoritmo en Lisp que almacene\nen  un  vector  secundario los numeros pares\ncontenidos en un vector de 10 elementos.\n|#");
        this.algoritmos.get(3).add("Funcion ParesVector\n    inicializar nuemros = hacer-vector(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    inicializar pares = hacer-vector()\n    desde i = 1 hasta 10 hacer:\n        si (modulo(nuemros[i], 2) = 0)\n            agregar(pares, nuemros[i])\n    imprimir \"Vector pares: \", pares\n\nllamar Funcion ParesVector");
        this.algoritmos.get(3).add("(defun ParesVector()\n  (setq nuemros \n     (1 2 3 4 5 6 7 8 9 10)\n  )\n  (setq pares (make-vector))\n  (loop for i from 1 to 10\n    do(loop for j from 1 to 10\n      do(if (= remainder((vector-ref nuemros i)2)0)\n            (append pares (vector-ref nuemros i))\n        )\n     )\n   )\n   (print \"Vector pares: ~d\" pares)\n)\n\n(ParesVector)");
        this.algoritmos.get(3).add("77");
        this.pasos.get(3).get(0).add("Llamado");
        this.pasos.get(3).get(0).add("Funcion");
        this.pasos.get(3).get(0).add("Asignación");
        this.pasos.get(3).get(0).add("hacervector");
        this.pasos.get(3).get(0).add("for");
        this.pasos.get(3).get(0).add("for");
        this.pasos.get(3).get(0).add("Condicional");
        this.pasos.get(3).get(0).add("añadir");
        this.pasos.get(3).get(0).add("for");
        this.pasos.get(3).get(0).add("for");
        this.pasos.get(3).get(0).add("Condicional");
        this.pasos.get(3).get(0).add("añadir");
        this.pasos.get(3).get(0).add("Impresión");
        /////////////////////////////////
        this.pasos.get(3).get(1).add("(ParesVector)");
        this.pasos.get(3).get(1).add("(defun ParesVector()");
        this.pasos.get(3).get(1).add("(setq nuemros ");
        this.pasos.get(3).get(1).add("(setq pares (make-vector))");
        this.pasos.get(3).get(1).add("(loop for i from 1 to 10");
        this.pasos.get(3).get(1).add("do(loop for j from 1 to 10");
        this.pasos.get(3).get(1).add("do(if (= remainder((vector-ref nuemros i)2)0)");
        this.pasos.get(3).get(1).add("(append pares (vector-ref nuemros i))");
        this.pasos.get(3).get(1).add("(loop for i from 1 to 10");
        this.pasos.get(3).get(1).add("do(loop for j from 1 to 10");
        this.pasos.get(3).get(1).add("do(if (= remainder((vector-ref nuemros i)2)0)");
        this.pasos.get(3).get(1).add("(append pares (vector-ref nuemros i))");
        this.pasos.get(3).get(1).add("(print \"Vector pares: ~d\" pares)")
        ;////////////////   79    /////////////////
        this.algoritmos.get(4).add("#|\nConstruir  un  algoritmo  en Lisp donde se\nalmacenen   datos  en  un vector de fomra\naleatoria , y reciba un número X y escriba \nen  la  pantalla   todos  los  índices  de  las \nposiciones   del   arreglo   donde   está  X. \nPor    ejemplo,   si   el  arreglo  e s el  que \naparece   enseguida   y   X   es   2:\n             a. 1-2-3-100-23-2-2-1\n        b. escribir: 1 5 6 (INDICES).\n|#");
        this.algoritmos.get(4).add("Funcion Indices\n    inicializar numeros = hacer-vector 10 (random(5))\n    desde i = 0 hasta 10 hacer:\n        si(numeros[i] = num)\n            imprimir i\n    imprimir \" INDICES\"\n\nllamar Funcion Indices");
        this.algoritmos.get(4).add("(defun Indices()\n    (print \"Ingrese un numero: \")\n    (setq num (read))\n    (setq nuemros (make-vector 10 (random 5)))\n    (loop for i from 1 to 10\n        do(if(= (vector-ref numeros i) num)\n             (print i)\n        )\n    )\n    (print \" INDICES\")\n)\n\n(Indices)");
        this.algoritmos.get(4).add("78");
        this.pasos.get(4).get(0).add("Llamado");
        this.pasos.get(4).get(0).add("Funcion");
        this.pasos.get(4).get(0).add("Impresión");
        this.pasos.get(4).get(0).add("Lectura");
        this.pasos.get(4).get(0).add("Asignación");
        this.pasos.get(4).get(0).add("for");
        this.pasos.get(4).get(0).add("Condicional");
        this.pasos.get(4).get(0).add("Impresión");
        this.pasos.get(4).get(0).add("for");
        this.pasos.get(4).get(0).add("Condicional");
        this.pasos.get(4).get(0).add("Impresión");
        this.pasos.get(4).get(0).add("for");
        this.pasos.get(4).get(0).add("Condicional");
        this.pasos.get(4).get(0).add("Impresión");
        this.pasos.get(4).get(0).add("Impresión");
        /////////////////////////////////
        this.pasos.get(4).get(1).add("(Indices)");
        this.pasos.get(4).get(1).add("(defun Indices()");
        this.pasos.get(4).get(1).add("(print \"Ingrese un numero: \")");
        this.pasos.get(4).get(1).add("(setq num (read))");
        this.pasos.get(4).get(1).add("(setq nuemros (make-vector 10 (random 5)))");
        this.pasos.get(4).get(1).add("(loop for i from 1 to 10");
        this.pasos.get(4).get(1).add("do(if(= (vector-ref numeros i) num)");
        this.pasos.get(4).get(1).add("(print i)");
        this.pasos.get(4).get(1).add("(loop for i from 1 to 10");
        this.pasos.get(4).get(1).add("do(if(= (vector-ref numeros i) num)");
        this.pasos.get(4).get(1).add("(print i)");
        this.pasos.get(4).get(1).add("(loop for i from 1 to 10");
        this.pasos.get(4).get(1).add("do(if(= (vector-ref numeros i) num)");
        this.pasos.get(4).get(1).add("(print i)");
        this.pasos.get(4).get(1).add("(print \" INDICES\")")
        ;////////////////   80    /////////////////
        this.algoritmos.get(5).add("#|\nConstruir un algoritmo en Lisp que Sume de\nun   vector   todos   los   números negativos\npares. \n|#");
        this.algoritmos.get(5).add("Funcion SumaNegativos\n    inicializar nuemros = hacer-vector(3, -2, 6, 5, -4, -8, 2, -1)\n    inicializar pares = hacer-vector()\n    suma = 0\n    desde i = 1 hasta 10 hacer:\n        si(nuemros[i] < 0)\n            si(modulo(nuemros[i], 2) = 0)\n                suma = suma + nuemros[i]\n    imprimir \"La suma es: \", suma\n\nllamar Funcion SumaNegativos");
        this.algoritmos.get(5).add("(defun SumaNegativos()\n (setq nuemros \n   (3 -2 6 5 -4 -8 2 -1)\n )\n (setq suma 0)\n (loop for i from 1 to 10\n  do(loop for j from 1 to 10\n    do(if(< (vector-ref nuemros i) 0)\n        (if (= remainder((vector-ref nuemros i)2)0)\n           (set suma(+ suma(vector-ref nuemros i)))\n         )\n      )\n    )\n  )\n  (print \"La suma es:  ~d\" suma)\n)\n\n(SumaNegativos)");
        this.algoritmos.get(5).add("79");
        this.pasos.get(5).get(0).add("Llamado");
        this.pasos.get(5).get(0).add("Funcion");
        this.pasos.get(5).get(0).add("Asignación");
        this.pasos.get(5).get(0).add("Asignación");
        this.pasos.get(5).get(0).add("for");
        this.pasos.get(5).get(0).add("for");
        this.pasos.get(5).get(0).add("Condicional");
        this.pasos.get(5).get(0).add("CondiAnidado");
        this.pasos.get(5).get(0).add("Actualizar");
        this.pasos.get(5).get(0).add("for");
        this.pasos.get(5).get(0).add("for");
        this.pasos.get(5).get(0).add("Condicional");
        this.pasos.get(5).get(0).add("CondiAnidado");
        this.pasos.get(5).get(0).add("Actualizar");
        this.pasos.get(5).get(0).add("Impresión");
        /////////////////////////////////
        this.pasos.get(5).get(1).add("(SumaNegativos)");
        this.pasos.get(5).get(1).add("(defun SumaNegativos()");
        this.pasos.get(5).get(1).add("(setq nuemros ");
        this.pasos.get(5).get(1).add("(setq suma 0)");
        this.pasos.get(5).get(1).add("(loop for i from 1 to 10");
        this.pasos.get(5).get(1).add("do(loop for j from 1 to 10");
        this.pasos.get(5).get(1).add("do(if(< (vector-ref nuemros i) 0)");
        this.pasos.get(5).get(1).add("(if (= remainder((vector-ref nuemros i)2)0)");
        this.pasos.get(5).get(1).add("(set suma(+ suma(vector-ref nuemros i)))");
        this.pasos.get(5).get(1).add("(loop for i from 1 to 10");
        this.pasos.get(5).get(1).add("do(loop for j from 1 to 10");
        this.pasos.get(5).get(1).add("do(if(< (vector-ref nuemros i) 0)");
        this.pasos.get(5).get(1).add("(if (= remainder((vector-ref nuemros i)2)0)");
        this.pasos.get(5).get(1).add("(set suma(+ suma(vector-ref nuemros i)))");
        this.pasos.get(5).get(1).add("(print \"La suma es:  ~d\" suma)");
        ////////////////   81    /////////////////
        this.algoritmos.get(6).add("#|\nConstruir un algoritmo en Lisp que muestre\nlos números del 1 al 10 usando recursividad\n|#");
        this.algoritmos.get(6).add("Funcion Serie(n)\n    si(n > 11)\n        \"no hace nada\"\n    sino:\n        imprimir n, \" \"\n        Serie(n + 1)\n\nllamar Funcion Serie(1)");
        this.algoritmos.get(6).add("(defun Serie(n)\n    (if(> n 11)\n        (void)\n        (begin\n            (print \"~d \" n)\n            (Serie (+ n 1))\n        )\n    )\n  )\n\n(Serie 1)");
        this.algoritmos.get(6).add("80");
        this.pasos.get(6).get(0).add("Llamado");
        this.pasos.get(6).get(0).add("Funcion");
        this.pasos.get(6).get(0).add("Condicional");
        this.pasos.get(6).get(0).add("Vacio");
        this.pasos.get(6).get(0).add("agrupacion");
        this.pasos.get(6).get(0).add("Impresión");
        this.pasos.get(6).get(0).add("recursion");
        this.pasos.get(6).get(0).add("Funcion");
        this.pasos.get(6).get(0).add("Condicional");
        this.pasos.get(6).get(0).add("Vacio");
        this.pasos.get(6).get(0).add("agrupacion");
        this.pasos.get(6).get(0).add("Impresión");
        this.pasos.get(6).get(0).add("recursion");
        this.pasos.get(6).get(0).add("Funcion");
        this.pasos.get(6).get(0).add("Condicional");
        this.pasos.get(6).get(0).add("Vacio");
        this.pasos.get(6).get(0).add("agrupacion");
        this.pasos.get(6).get(0).add("Impresión");
        this.pasos.get(6).get(0).add("recursion");
        /////////////////////////////////
        this.pasos.get(6).get(1).add("(Serie 1)");
        this.pasos.get(6).get(1).add("(defun Serie(n)");
        this.pasos.get(6).get(1).add("(if(> n 11)");
        this.pasos.get(6).get(1).add("(void)");
        this.pasos.get(6).get(1).add("(begin");
        this.pasos.get(6).get(1).add("(print \"~d \" n)");
        this.pasos.get(6).get(1).add("(Serie (+ n 1))");
        this.pasos.get(6).get(1).add("(defun Serie(n)");
        this.pasos.get(6).get(1).add("(if(> n 11)");
        this.pasos.get(6).get(1).add("(void)");
        this.pasos.get(6).get(1).add("(begin");
        this.pasos.get(6).get(1).add("(print \"~d \" n)");
        this.pasos.get(6).get(1).add("(Serie (+ n 1))");
        this.pasos.get(6).get(1).add("(defun Serie(n)");
        this.pasos.get(6).get(1).add("(if(> n 11)");
        this.pasos.get(6).get(1).add("(void)");
        this.pasos.get(6).get(1).add("(begin");
        this.pasos.get(6).get(1).add("(print \"~d \" n)");
        this.pasos.get(6).get(1).add("(Serie (+ n 1))");
        ////////////////   82    /////////////////
        this.algoritmos.get(7).add("#|\nConstruir un algoritmo en Lisp que sume los \nnúmeros entre 1 y 10 usando recursividad\n|#");
        this.algoritmos.get(7).add("Funcion Suma(n, suma)\n    si(n > 11)\n        imprimir \"suma: \", suma\n    sino:\n        Suma((n + 1) (n + suma))\n\nllamar Funcion Suma(1, 1)");
        this.algoritmos.get(7).add("(defun Suma(n suma)\n    (if(> n 11)\n        (print suma)\n        (begin\n            (Suma (+ n 1) (+ n suma))\n        )\n    )\n)\n\n(Suma 1 1)");
        this.algoritmos.get(7).add("81");
        this.pasos.get(7).get(0).add("Llamado");
        this.pasos.get(7).get(0).add("Funcion");
        this.pasos.get(7).get(0).add("Condicional");
        this.pasos.get(7).get(0).add("Impresión");
        this.pasos.get(7).get(0).add("agrupacion");
        this.pasos.get(7).get(0).add("recursion");
        this.pasos.get(7).get(0).add("Funcion");
        this.pasos.get(7).get(0).add("Condicional");
        this.pasos.get(7).get(0).add("Impresión");
        this.pasos.get(7).get(0).add("agrupacion");
        this.pasos.get(7).get(0).add("recursion");
        this.pasos.get(7).get(0).add("Funcion");
        this.pasos.get(7).get(0).add("Condicional");
        this.pasos.get(7).get(0).add("Impresión");
        this.pasos.get(7).get(0).add("agrupacion");
        this.pasos.get(7).get(0).add("recursion");
        /////////////////////////////////
        this.pasos.get(7).get(1).add("(Suma 1 1)");
        this.pasos.get(7).get(1).add("(defun Suma(n suma)");
        this.pasos.get(7).get(1).add("(if(> n 11)");
        this.pasos.get(7).get(1).add("(print suma)");
        this.pasos.get(7).get(1).add("(begin");
        this.pasos.get(7).get(1).add("(Suma (+ n 1) (+ n suma))");
        this.pasos.get(7).get(1).add("(defun Suma(n suma)");
        this.pasos.get(7).get(1).add("(if(> n 11)");
        this.pasos.get(7).get(1).add("(print suma)");
        this.pasos.get(7).get(1).add("(begin");
        this.pasos.get(7).get(1).add("(Suma (+ n 1) (+ n suma))");
        this.pasos.get(7).get(1).add("(defun Suma(n suma)");
        this.pasos.get(7).get(1).add("(if(> n 11)");
        this.pasos.get(7).get(1).add("(print suma)");
        this.pasos.get(7).get(1).add("(begin");
        this.pasos.get(7).get(1).add("(Suma (+ n 1) (+ n suma))");
        ////////////////   83    /////////////////
        this.algoritmos.get(8).add("#|\nConstruir un algoritmo en Lisp que muestre\nla serie 3,6,9,12,15,18 usando recursividad\n|#");
        this.algoritmos.get(8).add("Funcion Serie3(n)\n    si(n > 20)\n        \"no hace nada\"\n    sino:\n        imprimir n, \", \"\n        Serie3(n + 3)\n\nllamar Funcion Serie3(3)");
        this.algoritmos.get(8).add("(defun Serie3(n)\n    (if(> n 20)\n        (void)\n        (begin\n            (print \"~d, \" n)\n            (Serie3 (+ n 3))\n        )\n    )\n  )\n\n(Serie3 3)");
        this.algoritmos.get(8).add("82");
        this.pasos.get(8).get(0).add("Llamado");
        this.pasos.get(8).get(0).add("Funcion");
        this.pasos.get(8).get(0).add("Condicional");
        this.pasos.get(8).get(0).add("Vacio");
        this.pasos.get(8).get(0).add("agrupacion");
        this.pasos.get(8).get(0).add("Impresión");
        this.pasos.get(8).get(0).add("recursion");
        this.pasos.get(8).get(0).add("Funcion");
        this.pasos.get(8).get(0).add("Condicional");
        this.pasos.get(8).get(0).add("Vacio");
        this.pasos.get(8).get(0).add("agrupacion");
        this.pasos.get(8).get(0).add("Impresión");
        this.pasos.get(8).get(0).add("recursion");
        this.pasos.get(8).get(0).add("Funcion");
        this.pasos.get(8).get(0).add("Condicional");
        this.pasos.get(8).get(0).add("Vacio");
        this.pasos.get(8).get(0).add("agrupacion");
        this.pasos.get(8).get(0).add("Impresión");
        this.pasos.get(8).get(0).add("recursion");
        /////////////////////////////////
        this.pasos.get(8).get(1).add("(Serie3 3)");
        this.pasos.get(8).get(1).add("(defun Serie3(n)");
        this.pasos.get(8).get(1).add("(if(> n 20)");
        this.pasos.get(8).get(1).add("(void)");
        this.pasos.get(8).get(1).add("(begin");
        this.pasos.get(8).get(1).add("(print \"~d, \" n)");
        this.pasos.get(8).get(1).add("(Serie3 (+ n 3))");
        this.pasos.get(8).get(1).add("(defun Serie3(n)");
        this.pasos.get(8).get(1).add("(if(> n 20)");
        this.pasos.get(8).get(1).add("(void)");
        this.pasos.get(8).get(1).add("(begin");
        this.pasos.get(8).get(1).add("(print \"~d, \" n)");
        this.pasos.get(8).get(1).add("(Serie3 (+ n 3))");
        this.pasos.get(8).get(1).add("(defun Serie3(n)");
        this.pasos.get(8).get(1).add("(if(> n 20)");
        this.pasos.get(8).get(1).add("(void)");
        this.pasos.get(8).get(1).add("(begin");
        this.pasos.get(8).get(1).add("(print \"~d, \" n)");
        this.pasos.get(8).get(1).add("(Serie3 (+ n 3))");
        ////////////////   84    /////////////////
        this.algoritmos.get(9).add("#|\nConstruir un algoritmo en Lisp que reste los \nnúmeros entre 1 y 10 usando recursividad\n|#");
        this.algoritmos.get(9).add("Funcion Resta(n, resta)\n    si(n > 11)\n        imprimir \"resta: \", resta\n    sino:\n        Resta((n + 1) (resta - n))\n\nllamar Funcion Resta(1, 1)");
        this.algoritmos.get(9).add("(defun Resta(n resta)\n    (if(> n 11)\n        (print resta)\n        (begin\n            (Resta (+ n 1) (- resta n))\n        )\n    )\n)\n\n(Resta 1 1)");
        this.algoritmos.get(9).add("83");
        this.pasos.get(9).get(0).add("Llamado");
        this.pasos.get(9).get(0).add("Funcion");
        this.pasos.get(9).get(0).add("Condicional");
        this.pasos.get(9).get(0).add("Impresión");
        this.pasos.get(9).get(0).add("agrupacion");
        this.pasos.get(9).get(0).add("recursion");
        this.pasos.get(9).get(0).add("Funcion");
        this.pasos.get(9).get(0).add("Condicional");
        this.pasos.get(9).get(0).add("Impresión");
        this.pasos.get(9).get(0).add("agrupacion");
        this.pasos.get(9).get(0).add("recursion");
        this.pasos.get(9).get(0).add("Funcion");
        this.pasos.get(9).get(0).add("Condicional");
        this.pasos.get(9).get(0).add("Impresión");
        this.pasos.get(9).get(0).add("agrupacion");
        this.pasos.get(9).get(0).add("recursion");
        this.pasos.get(9).get(0).add("Funcion");
        this.pasos.get(9).get(0).add("Condicional");
        this.pasos.get(9).get(0).add("Impresión");
        this.pasos.get(9).get(0).add("agrupacion");
        this.pasos.get(9).get(0).add("recursion");
        /////////////////////////////////
        this.pasos.get(9).get(1).add("(Resta 1 1)");
        this.pasos.get(9).get(1).add("(defun Resta(n resta)");
        this.pasos.get(9).get(1).add("(if(> n 11)");
        this.pasos.get(9).get(1).add("(print resta)");
        this.pasos.get(9).get(1).add("(begin");
        this.pasos.get(9).get(1).add("(Resta (+ n 1) (- resta n))");
        this.pasos.get(9).get(1).add("(defun Resta(n resta)");
        this.pasos.get(9).get(1).add("(if(> n 11)");
        this.pasos.get(9).get(1).add("(print resta)");
        this.pasos.get(9).get(1).add("(begin");
        this.pasos.get(9).get(1).add("(Resta (+ n 1) (- resta n))");
        this.pasos.get(9).get(1).add("(defun Resta(n resta)");
        this.pasos.get(9).get(1).add("(if(> n 11)");
        this.pasos.get(9).get(1).add("(print resta)");
        this.pasos.get(9).get(1).add("(begin");
        this.pasos.get(9).get(1).add("(Resta (+ n 1) (- resta n))");
        this.pasos.get(9).get(1).add("(defun Resta(n resta)");
        this.pasos.get(9).get(1).add("(if(> n 11)");
        this.pasos.get(9).get(1).add("(print resta)");
        this.pasos.get(9).get(1).add("(begin");
        this.pasos.get(9).get(1).add("(Resta (+ n 1) (- resta n))");
        ////////////////   85    /////////////////
        this.algoritmos.get(10).add("#|\nConstruir un algoritmo en Lisp que permita\ncalcular  el  factorial  de un número usando \nrecursividad\n|#");
        this.algoritmos.get(10).add("Funcion factorial(n)\n    si(n = 1)\n        1\n    sino:\n        n * factorial((n - 1))\n\nllamar Funcion factorial(5)");
        this.algoritmos.get(10).add("(defun factorial(n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))\n    )\n)\n\n(factorial 5)");
        this.algoritmos.get(10).add("84");
        this.pasos.get(10).get(0).add("Llamado");
        this.pasos.get(10).get(0).add("Funcion");
        this.pasos.get(10).get(0).add("Condicional");
        this.pasos.get(10).get(0).add("retorno");
        this.pasos.get(10).get(0).add("recursion");
        this.pasos.get(10).get(0).add("Funcion");
        this.pasos.get(10).get(0).add("Condicional");
        this.pasos.get(10).get(0).add("retorno");
        this.pasos.get(10).get(0).add("recursion");
        this.pasos.get(10).get(0).add("Funcion");
        this.pasos.get(10).get(0).add("Condicional");
        this.pasos.get(10).get(0).add("retorno");
        this.pasos.get(10).get(0).add("recursion");
        this.pasos.get(10).get(0).add("Funcion");
        this.pasos.get(10).get(0).add("Condicional");
        this.pasos.get(10).get(0).add("retorno");
        this.pasos.get(10).get(0).add("recursion");
        /////////////////////////////////
        this.pasos.get(10).get(1).add("(factorial 5) -}> 120");
        this.pasos.get(10).get(1).add("(defun factorial(n)");
        this.pasos.get(10).get(1).add("(if (= n 1)");
        this.pasos.get(10).get(1).add("  1");
        this.pasos.get(10).get(1).add("(* n (factorial (- n 1)))");
        this.pasos.get(10).get(1).add("(defun factorial(n)");
        this.pasos.get(10).get(1).add("(if (= n 1)");
        this.pasos.get(10).get(1).add("  1");
        this.pasos.get(10).get(1).add("(* n (factorial (- n 1)))");
        this.pasos.get(10).get(1).add("(defun factorial(n)");
        this.pasos.get(10).get(1).add("(if (= n 1)");
        this.pasos.get(10).get(1).add("  1");
        this.pasos.get(10).get(1).add("(* n (factorial (- n 1)))");
        this.pasos.get(10).get(1).add("(defun factorial(n)");
        this.pasos.get(10).get(1).add("(if (= n 1)");
        this.pasos.get(10).get(1).add("  1");
        this.pasos.get(10).get(1).add("(* n (factorial (- n 1)))");
        ////////////////   86    /////////////////
        this.algoritmos.get(11).add("#|\nConstruir un algoritmo en Lisp que permita\ncalcular    la    seria   de   fibonacci   usando \nrecursividad\n|#");
        this.algoritmos.get(11).add("Funcion fibonacci(n)\n    evaluar\n        (n = 0) 0\n        (n = 1) 1\n        t = (fibonacci (n - 1)) + (fibonacci (n - 2)))\n\nllamar Funcion fibonacci(12)");
        this.algoritmos.get(11).add("(defun fibonacci(n)\n  (cond \n    ( (= n 0) 0)\n    ( (= n 1) 1)\n    (t (+ (fibonacci (- n 1)) (fibonacci (- n 2))))\n  )\n)\n\n(fibonacci 12)");
        this.algoritmos.get(11).add("85");
        this.pasos.get(11).get(0).add("Llamado");
        this.pasos.get(11).get(0).add("Funcion");
        this.pasos.get(11).get(0).add("Cond");
        this.pasos.get(11).get(0).add("Igual");
        this.pasos.get(11).get(0).add("Igual");
        this.pasos.get(11).get(0).add("recursion");
        this.pasos.get(11).get(0).add("Funcion");
        this.pasos.get(11).get(0).add("Cond");
        this.pasos.get(11).get(0).add("Igual");
        this.pasos.get(11).get(0).add("Igual");
        this.pasos.get(11).get(0).add("recursion");
        this.pasos.get(11).get(0).add("Funcion");
        this.pasos.get(11).get(0).add("Cond");
        this.pasos.get(11).get(0).add("Igual");
        this.pasos.get(11).get(0).add("Igual");
        this.pasos.get(11).get(0).add("recursion");
        this.pasos.get(11).get(0).add("Funcion");
        this.pasos.get(11).get(0).add("Cond");
        this.pasos.get(11).get(0).add("Igual");
        this.pasos.get(11).get(0).add("Igual");
        this.pasos.get(11).get(0).add("recursion");
        /////////////////////////////////
        this.pasos.get(11).get(1).add("(fibonacci 12)");
        this.pasos.get(11).get(1).add("(defun fibonacci(n)");
        this.pasos.get(11).get(1).add("(cond ");
        this.pasos.get(11).get(1).add("( (= n 0) 0)");
        this.pasos.get(11).get(1).add("( (= n 1) 1)");
        this.pasos.get(11).get(1).add("(t (+ (fibonacci (- n 1)) (fibonacci (- n 2))))");
        this.pasos.get(11).get(1).add("(defun fibonacci(n)");
        this.pasos.get(11).get(1).add("(cond ");
        this.pasos.get(11).get(1).add("( (= n 0) 0)");
        this.pasos.get(11).get(1).add("( (= n 1) 1)");
        this.pasos.get(11).get(1).add("(t (+ (fibonacci (- n 1)) (fibonacci (- n 2))))");
        this.pasos.get(11).get(1).add("(defun fibonacci(n)");
        this.pasos.get(11).get(1).add("(cond ");
        this.pasos.get(11).get(1).add("( (= n 0) 0)");
        this.pasos.get(11).get(1).add("( (= n 1) 1)");
        this.pasos.get(11).get(1).add("(t (+ (fibonacci (- n 1)) (fibonacci (- n 2))))");
        this.pasos.get(11).get(1).add("(defun fibonacci(n)");
        this.pasos.get(11).get(1).add("(cond ");
        this.pasos.get(11).get(1).add("( (= n 0) 0)");
        this.pasos.get(11).get(1).add("( (= n 1) 1)");
        this.pasos.get(11).get(1).add("(t (+ (fibonacci (- n 1)) (fibonacci (- n 2))))");
        this.pasos.get(11).get(1).add("");
        ////////////////   87    /////////////////
        this.algoritmos.get(12).add("#|\nConstruir un algoritmo en Lisp que permita\ncalcular la tabla de multiplicar de un número \nusando recursividad.\n|#");
        this.algoritmos.get(12).add("Funcion multiplicacion(n, m, r)\n    si(n > 11)\n        \"no hace nada\"\n    sino:\n        imprimir n, \" * \", m, \" = \", r\n        multiplicacion(n, (m + 1), (n * m))\n\nllamar Funcion multiplicacion(1, 1, 0)");
        this.algoritmos.get(12).add("(defun multiplicacion(n m r)\n    (if(> n 11)\n        (void)\n        (begin\n            (print \"~d * ~d = ~d\" n m r)\n            (multiplicacion n (+ m 1) (* n m))\n        )\n    )\n)\n\n(multiplicacion (read) 1 0)");
        this.algoritmos.get(12).add("86");
        this.pasos.get(12).get(0).add("Llamado");
        this.pasos.get(12).get(0).add("Lectura");
        this.pasos.get(12).get(0).add("Funcion");
        this.pasos.get(12).get(0).add("Condicional");
        this.pasos.get(12).get(0).add("Vacio");
        this.pasos.get(12).get(0).add("agrupacion");
        this.pasos.get(12).get(0).add("Impresión");
        this.pasos.get(12).get(0).add("recursion");
        this.pasos.get(12).get(0).add("Funcion");
        this.pasos.get(12).get(0).add("Condicional");
        this.pasos.get(12).get(0).add("Vacio");
        this.pasos.get(12).get(0).add("agrupacion");
        this.pasos.get(12).get(0).add("Impresión");
        this.pasos.get(12).get(0).add("recursion");
        this.pasos.get(12).get(0).add("Funcion");
        this.pasos.get(12).get(0).add("Condicional");
        this.pasos.get(12).get(0).add("Vacio");
        this.pasos.get(12).get(0).add("agrupacion");
        this.pasos.get(12).get(0).add("Impresión");
        this.pasos.get(12).get(0).add("recursion");
        /////////////////////////////////
        this.pasos.get(12).get(1).add("(multiplicacion (read) 1 0)");
        this.pasos.get(12).get(1).add("(read)");
        this.pasos.get(12).get(1).add("(defun multiplicacion(n m r)");
        this.pasos.get(12).get(1).add("(if(> n 11)");
        this.pasos.get(12).get(1).add("(void)");
        this.pasos.get(12).get(1).add("(begin");
        this.pasos.get(12).get(1).add("(print \"~d * ~d = ~d\" n m r)");
        this.pasos.get(12).get(1).add("(multiplicacion n (+ m 1) (* n m))");
        this.pasos.get(12).get(1).add("(defun multiplicacion(n m r)");
        this.pasos.get(12).get(1).add("(if(> n 11)");
        this.pasos.get(12).get(1).add("(void)");
        this.pasos.get(12).get(1).add("(begin");
        this.pasos.get(12).get(1).add("(print \"~d * ~d = ~d\" n m r)");
        this.pasos.get(12).get(1).add("(multiplicacion n (+ m 1) (* n m))");
        this.pasos.get(12).get(1).add("(defun multiplicacion(n m r)");
        this.pasos.get(12).get(1).add("(if(> n 11)");
        this.pasos.get(12).get(1).add("(void)");
        this.pasos.get(12).get(1).add("(begin");
        this.pasos.get(12).get(1).add("(print \"~d * ~d = ~d\" n m r)");
        this.pasos.get(12).get(1).add("(multiplicacion n (+ m 1) (* n m))");
        ////////////////   88    /////////////////
        this.algoritmos.get(13).add("#|\nConstruir un algoritmo en Lisp que permita\ncalcular   la   multipliación  de  dos  número\nmediante sumas usando recursividad.\n|#");
        this.algoritmos.get(13).add("Funcion multiSumas(z, n, m, r)\n    si(n > 11)\n        imprimir n, \" * \", z, \" = \", r\n    sino:\n        multiSumas((z + 1), n, m, (n + n))\n\nllamar Funcion multiSumas(1, (lectura), (lectura), 0)");
        this.algoritmos.get(13).add("(defun multiSumas(z n m r)\n    (if(> z m)\n        (print \"~d * ~d = ~d \" n m r)\n        (begin\n            (multiSumas (+ z 1) n m (+ n n))\n        )\n    )\n    \n)\n\n(multiSumas 1 (read) (read) 0)");
        this.algoritmos.get(13).add("87");
        this.pasos.get(13).get(0).add("Llamado");
        this.pasos.get(13).get(0).add("Lectura");
        this.pasos.get(13).get(0).add("Lectura");
        this.pasos.get(13).get(0).add("Funcion");
        this.pasos.get(13).get(0).add("Condicional");
        this.pasos.get(13).get(0).add("Impresión");
        this.pasos.get(13).get(0).add("agrupacion");
        this.pasos.get(13).get(0).add("recursion");
        this.pasos.get(13).get(0).add("Funcion");
        this.pasos.get(13).get(0).add("Condicional");
        this.pasos.get(13).get(0).add("Impresión");
        this.pasos.get(13).get(0).add("agrupacion");
        this.pasos.get(13).get(0).add("recursion");
        this.pasos.get(13).get(0).add("Funcion");
        this.pasos.get(13).get(0).add("Condicional");
        this.pasos.get(13).get(0).add("Impresión");
        this.pasos.get(13).get(0).add("agrupacion");
        this.pasos.get(13).get(0).add("recursion");
        /////////////////////////////////
        this.pasos.get(13).get(1).add("(multiSumas 1 (read) (read) 0)");
        this.pasos.get(13).get(1).add("(read)");
        this.pasos.get(13).get(1).add("(read)");
        this.pasos.get(13).get(1).add("(defun multiSumas(z n m r)");
        this.pasos.get(13).get(1).add("(if(> z m)");
        this.pasos.get(13).get(1).add("(print \"~d * ~d = ~d \" n m r)");
        this.pasos.get(13).get(1).add("(begin");
        this.pasos.get(13).get(1).add("(multiSumas (+ z 1) n m (+ n n))");
        this.pasos.get(13).get(1).add("(defun multiSumas(z n m r)");
        this.pasos.get(13).get(1).add("(if(> z m)");
        this.pasos.get(13).get(1).add("(print \"~d * ~d = ~d \" n m r)");
        this.pasos.get(13).get(1).add("(begin");
        this.pasos.get(13).get(1).add("(multiSumas (+ z 1) n m (+ n n))");
        this.pasos.get(13).get(1).add("(defun multiSumas(z n m r)");
        this.pasos.get(13).get(1).add("(if(> z m)");
        this.pasos.get(13).get(1).add("(print \"~d * ~d = ~d \" n m r)");
        this.pasos.get(13).get(1).add("(begin");
        this.pasos.get(13).get(1).add("(multiSumas (+ z 1) n m (+ n n))");
        ////////////////   89    /////////////////
        this.algoritmos.get(14).add("#|\nConstruir un algoritmo en Lisp que permita\ncalcular  la  potencia  de  un   número  dado \nusando recursividad.\n|#");
        this.algoritmos.get(14).add("Funcion Potenicas(z, n, m, r)\n    si(n > 11)\n        imprimir n, \" * \", z, \" = \", r\n    sino:\n        Potenicas((z + 1), n, m, (n * r))\n\nllamar Funcion Potenicas(1, (lectura), (lectura), 1)");
        this.algoritmos.get(14).add("(defun Potenicas(z n m r)\n    (if(> z m)\n        (print \"~d ^ ~d = ~d: \" n m r)\n        (begin\n            (Potenicas (+ z 1) n m (* n r))\n        )\n    )\n    \n)\n\n(Potenicas 1 (read) (read) 1)");
        this.algoritmos.get(14).add("88");
        this.pasos.get(14).get(0).add("Llamado");
        this.pasos.get(14).get(0).add("Lectura");
        this.pasos.get(14).get(0).add("Lectura");
        this.pasos.get(14).get(0).add("Funcion");
        this.pasos.get(14).get(0).add("Condicional");
        this.pasos.get(14).get(0).add("Impresión");
        this.pasos.get(14).get(0).add("agrupacion");
        this.pasos.get(14).get(0).add("recursion");
        this.pasos.get(14).get(0).add("Funcion");
        this.pasos.get(14).get(0).add("Condicional");
        this.pasos.get(14).get(0).add("Impresión");
        this.pasos.get(14).get(0).add("agrupacion");
        this.pasos.get(14).get(0).add("recursion");
        this.pasos.get(14).get(0).add("Funcion");
        this.pasos.get(14).get(0).add("Condicional");
        this.pasos.get(14).get(0).add("Impresión");
        this.pasos.get(14).get(0).add("agrupacion");
        this.pasos.get(14).get(0).add("recursion");
        /////////////////////////////////
        this.pasos.get(14).get(1).add("(Potenicas 1 (read) (read) 1)");
        this.pasos.get(14).get(1).add("(read)");
        this.pasos.get(14).get(1).add("(read)");
        this.pasos.get(14).get(1).add("(defun Potenicas(z n m r)");
        this.pasos.get(14).get(1).add("(if(> z m)");
        this.pasos.get(14).get(1).add("(print \"~d * ~d = ~d: \" n m r)");
        this.pasos.get(14).get(1).add("(begin");
        this.pasos.get(14).get(1).add("(Potenicas (+ z 1) n m (* n r))");
        this.pasos.get(14).get(1).add("(defun Potenicas(z n m r)");
        this.pasos.get(14).get(1).add("(if(> z m)");
        this.pasos.get(14).get(1).add("(print \"~d * ~d = ~d: \" n m r)");
        this.pasos.get(14).get(1).add("(begin");
        this.pasos.get(14).get(1).add("(Potenicas (+ z 1) n m (* n r))");
        this.pasos.get(14).get(1).add("(defun Potenicas(z n m r)");
        this.pasos.get(14).get(1).add("(if(> z m)");
        this.pasos.get(14).get(1).add("(print \"~d * ~d = ~d: \" n m r)");
        this.pasos.get(14).get(1).add("(begin");
        this.pasos.get(14).get(1).add("(Potenicas (+ z 1) n m (* n r))");
        ////////////////   90    /////////////////
        this.algoritmos.get(15).add("#|\nConstruir un algoritmo en Lisp que muestre\nlos  número  impares entre 20 y el 1 usando \nrecursividad.\n|#");
        this.algoritmos.get(15).add("Funcion impares(n)\n    si(n <= 0)\n        \"no hace nada\"\n    sino:\n        si(modulo(n, 2) != 0)\n           imprimir n, \" \"\n           impares (n - 2)\n        sino\n            impares (n - 1)\n\nllamar Funcion impares(20)");
        this.algoritmos.get(15).add("(defun impares(n)\n    (if(<= n 0)\n        (void)\n        (if (!= (remainder n 2)0)\n            (begin\n                (print \"~d \" n)\n                (impares (- n 2))\n            )\n            (impares (- n 1))\n        )\n   )\n)\n(impares 20)");
        this.algoritmos.get(15).add("89");
        this.pasos.get(15).get(0).add("Llamado");
        this.pasos.get(15).get(0).add("Funcion");
        this.pasos.get(15).get(0).add("Condicional");
        this.pasos.get(15).get(0).add("Vacio");
        this.pasos.get(15).get(0).add("CondiAnidado");
        this.pasos.get(15).get(0).add("agrupacion");
        this.pasos.get(15).get(0).add("Impresión");
        this.pasos.get(15).get(0).add("recursion");
        this.pasos.get(15).get(0).add("recursion");
        this.pasos.get(15).get(0).add("Funcion");
        this.pasos.get(15).get(0).add("Condicional");
        this.pasos.get(15).get(0).add("Vacio");
        this.pasos.get(15).get(0).add("CondiAnidado");
        this.pasos.get(15).get(0).add("agrupacion");
        this.pasos.get(15).get(0).add("Impresión");
        this.pasos.get(15).get(0).add("recursion");
        this.pasos.get(15).get(0).add("recursion");
        this.pasos.get(15).get(0).add("Funcion");
        this.pasos.get(15).get(0).add("Condicional");
        this.pasos.get(15).get(0).add("Vacio");
        this.pasos.get(15).get(0).add("CondiAnidado");
        this.pasos.get(15).get(0).add("agrupacion");
        this.pasos.get(15).get(0).add("Impresión");
        this.pasos.get(15).get(0).add("recursion");
        this.pasos.get(15).get(0).add("recursion");
        /////////////////////////////////
        this.pasos.get(15).get(1).add("(impares 20)");
        this.pasos.get(15).get(1).add("(defun impares(n)");
        this.pasos.get(15).get(1).add("(if(<= n 0)");
        this.pasos.get(15).get(1).add("(void)");
        this.pasos.get(15).get(1).add("(if (!= (remainder n 2)0)");
        this.pasos.get(15).get(1).add("(begin");
        this.pasos.get(15).get(1).add("(print \"~d \" n)");
        this.pasos.get(15).get(1).add("(impares (- n 2))");
        this.pasos.get(15).get(1).add("(impares (- n 1))");
        this.pasos.get(15).get(1).add("(defun impares(n)");
        this.pasos.get(15).get(1).add("(if(<= n 0)");
        this.pasos.get(15).get(1).add("(void)");
        this.pasos.get(15).get(1).add("(if (!= (remainder n 2)0)");
        this.pasos.get(15).get(1).add("(begin");
        this.pasos.get(15).get(1).add("(print \"~d \" n)");
        this.pasos.get(15).get(1).add("(impares (- n 2))");
        this.pasos.get(15).get(1).add("(impares (- n 1))");
        this.pasos.get(15).get(1).add("(defun impares(n)");
        this.pasos.get(15).get(1).add("(if(<= n 0)");
        this.pasos.get(15).get(1).add("(void)");
        this.pasos.get(15).get(1).add("(if (!= (remainder n 2)0)");
        this.pasos.get(15).get(1).add("(begin");
        this.pasos.get(15).get(1).add("(print \"~d \" n)");
        this.pasos.get(15).get(1).add("(impares (- n 2))");
        this.pasos.get(15).get(1).add("(impares (- n 1))")
        ;////////////////   91    /////////////////
        this.algoritmos.get(16).add("#|\nConstruir un algoritmo en Lisp que muestre\nlos  número  pares  desde  el  20 al 1 usando \nrecursividad.\n|#");
        this.algoritmos.get(16).add("Funcion pares(n)\n    si(n <= 0)\n        \"no hace nada\"\n    sino:\n        si(modulo(n, 2) = 0)\n           imprimir n, \" \"\n           pares(n - 2)\n        sino\n            pares (n - 1)\n\nllamar Funcion pares(20)");
        this.algoritmos.get(16).add("(defun pares(n)\n    (if(<= n 0)\n        (void)\n        (if (= (remainder n 2)0)\n            (begin\n                (print \"~d \" n)\n                (pares (- n 2))\n            )\n            (pares (- n 1))\n        )\n   )\n)\n(pares 20)");
        this.algoritmos.get(16).add("90");
        this.pasos.get(16).get(0).add("Llamado");
        this.pasos.get(16).get(0).add("Funcion");
        this.pasos.get(16).get(0).add("Condicional");
        this.pasos.get(16).get(0).add("Vacio");
        this.pasos.get(16).get(0).add("CondiAnidado");
        this.pasos.get(16).get(0).add("agrupacion");
        this.pasos.get(16).get(0).add("Impresión");
        this.pasos.get(16).get(0).add("recursion");
        this.pasos.get(16).get(0).add("recursion");
        this.pasos.get(16).get(0).add("Funcion");
        this.pasos.get(16).get(0).add("Condicional");
        this.pasos.get(16).get(0).add("Vacio");
        this.pasos.get(16).get(0).add("CondiAnidado");
        this.pasos.get(16).get(0).add("agrupacion");
        this.pasos.get(16).get(0).add("Impresión");
        this.pasos.get(16).get(0).add("recursion");
        this.pasos.get(16).get(0).add("recursion");
        this.pasos.get(16).get(0).add("Funcion");
        this.pasos.get(16).get(0).add("Condicional");
        this.pasos.get(16).get(0).add("Vacio");
        this.pasos.get(16).get(0).add("CondiAnidado");
        this.pasos.get(16).get(0).add("agrupacion");
        this.pasos.get(16).get(0).add("Impresión");
        this.pasos.get(16).get(0).add("recursion");
        this.pasos.get(16).get(0).add("recursion");
        /////////////////////////////////
        this.pasos.get(16).get(1).add("(pares 20)");
        this.pasos.get(16).get(1).add("(defun pares(n)");
        this.pasos.get(16).get(1).add("(if(<= n 0)");
        this.pasos.get(16).get(1).add("(void)");
        this.pasos.get(16).get(1).add("(if (= (remainder n 2)0)");
        this.pasos.get(16).get(1).add("(begin");
        this.pasos.get(16).get(1).add("(print \"~d \" n)");
        this.pasos.get(16).get(1).add("(pares (- n 2))");
        this.pasos.get(16).get(1).add("(pares (- n 1))");
        this.pasos.get(16).get(1).add("(defun pares(n)");
        this.pasos.get(16).get(1).add("(if(<= n 0)");
        this.pasos.get(16).get(1).add("(void)");
        this.pasos.get(16).get(1).add("(if (= (remainder n 2)0)");
        this.pasos.get(16).get(1).add("(begin");
        this.pasos.get(16).get(1).add("(print \"~d \" n)");
        this.pasos.get(16).get(1).add("(pares (- n 2))");
        this.pasos.get(16).get(1).add("(pares (- n 1))");
        this.pasos.get(16).get(1).add("(defun pares(n)");
        this.pasos.get(16).get(1).add("(if(<= n 0)");
        this.pasos.get(16).get(1).add("(void)");
        this.pasos.get(16).get(1).add("(if (= (remainder n 2)0)");
        this.pasos.get(16).get(1).add("(begin");
        this.pasos.get(16).get(1).add("(print \"~d \" n)");
        this.pasos.get(16).get(1).add("(pares (- n 2))");
        this.pasos.get(16).get(1).add("(pares (- n 1))");
        ////////////////   92    /////////////////
        this.algoritmos.get(17).add("#|\nConstruir un algoritmo en Lisp que muestre\nla  suma  de  los  números impares entre 1 y \n20 usando recursividad.\n|#");
        this.algoritmos.get(17).add("Funcion sumaimp(n, c)\n    si(n > 20)\n        imprimir c\n    sino:\n        si(modulo(n, 2) = 0)\n           sumaimp ((n + 1), c)\n        sino\n            sumaimp ((n + 1) (n + c))\n\nllamar Funcion sumaimp(0, 0)");
        this.algoritmos.get(17).add("(defun sumaimp(n c)\n    (if(> n 20)\n        (print c)\n        (if (= (remainder n 2)0)\n            (sumaimp (+ n 1) c)\n            (begin\n                (sumaimp (+ n 2) (+ c n))\n            )\n        )\n   )\n)\n\n(sumaimp 0 0)");
        this.algoritmos.get(17).add("91");
        this.pasos.get(17).get(0).add("Llamado");
        this.pasos.get(17).get(0).add("Funcion");
        this.pasos.get(17).get(0).add("Condicional");
        this.pasos.get(17).get(0).add("Impresión");
        this.pasos.get(17).get(0).add("CondiAnidado");
        this.pasos.get(17).get(0).add("recursion");
        this.pasos.get(17).get(0).add("agrupacion");
        this.pasos.get(17).get(0).add("recursion");
        this.pasos.get(17).get(0).add("Funcion");
        this.pasos.get(17).get(0).add("Condicional");
        this.pasos.get(17).get(0).add("Impresión");
        this.pasos.get(17).get(0).add("CondiAnidado");
        this.pasos.get(17).get(0).add("recursion");
        this.pasos.get(17).get(0).add("agrupacion");
        this.pasos.get(17).get(0).add("recursion");
        this.pasos.get(17).get(0).add("Funcion");
        this.pasos.get(17).get(0).add("Condicional");
        this.pasos.get(17).get(0).add("Impresión");
        this.pasos.get(17).get(0).add("CondiAnidado");
        this.pasos.get(17).get(0).add("recursion");
        this.pasos.get(17).get(0).add("agrupacion");
        this.pasos.get(17).get(0).add("recursion");
        /////////////////////////////////
        this.pasos.get(17).get(1).add("(sumaimp 0 0)");
        this.pasos.get(17).get(1).add("(defun sumaimp(n c)");
        this.pasos.get(17).get(1).add("(if(> n 20)");
        this.pasos.get(17).get(1).add("(print c)");
        this.pasos.get(17).get(1).add("(if (= (remainder n 2)0)");
        this.pasos.get(17).get(1).add("(sumaimp (+ n 1) c)");
        this.pasos.get(17).get(1).add("(begin");
        this.pasos.get(17).get(1).add("(sumaimp (+ n 2) (+ c n))");
        this.pasos.get(17).get(1).add("(defun sumaimp(n c)");
        this.pasos.get(17).get(1).add("(if(> n 20)");
        this.pasos.get(17).get(1).add("(print c)");
        this.pasos.get(17).get(1).add("(if (= (remainder n 2)0)");
        this.pasos.get(17).get(1).add("(sumaimp (+ n 1) c)");
        this.pasos.get(17).get(1).add("(begin");
        this.pasos.get(17).get(1).add("(sumaimp (+ n 2) (+ c n))");
        this.pasos.get(17).get(1).add("(defun sumaimp(n c)");
        this.pasos.get(17).get(1).add("(if(> n 20)");
        this.pasos.get(17).get(1).add("(print c)");
        this.pasos.get(17).get(1).add("(if (= (remainder n 2)0)");
        this.pasos.get(17).get(1).add("(sumaimp (+ n 1) c)");
        this.pasos.get(17).get(1).add("(begin");
        this.pasos.get(17).get(1).add("(sumaimp (+ n 2) (+ c n))");
        ////////////////   93    /////////////////
        this.algoritmos.get(18).add("#|\nConstruir un algoritmo en Lisp que muestre\nlos  cuadrados  de  los números entre 1 y 10 \nusando recursividad.\n|#");
        this.algoritmos.get(18).add("Funcion cuadrados(n, c)\n    si(n > 11)\n        \"no hace nada\"\n    sino:\n        imprimir n, \" \"\n        cuadrados((n + 1) (n * n))\n\nllamar Funcion cuadrados(1, 1)");
        this.algoritmos.get(18).add("(defun cuadrados(n c)\n    (if(> n 11)\n        (void)\n        (begin\n            (print \"~d \" c)\n            (cuadrados (+ n 1) ( * n n))\n        )\n    )\n  )\n(cuadrados 1 1)");
        this.algoritmos.get(18).add("92");
        this.pasos.get(18).get(0).add("Llamado");
        this.pasos.get(18).get(0).add("Funcion");
        this.pasos.get(18).get(0).add("Condicional");
        this.pasos.get(18).get(0).add("Vacio");
        this.pasos.get(18).get(0).add("agrupacion");
        this.pasos.get(18).get(0).add("Impresión");
        this.pasos.get(18).get(0).add("recursion");
        this.pasos.get(18).get(0).add("Funcion");
        this.pasos.get(18).get(0).add("Condicional");
        this.pasos.get(18).get(0).add("Vacio");
        this.pasos.get(18).get(0).add("agrupacion");
        this.pasos.get(18).get(0).add("Impresión");
        this.pasos.get(18).get(0).add("recursion");
        this.pasos.get(18).get(0).add("Funcion");
        this.pasos.get(18).get(0).add("Condicional");
        this.pasos.get(18).get(0).add("Vacio");
        this.pasos.get(18).get(0).add("agrupacion");
        this.pasos.get(18).get(0).add("Impresión");
        this.pasos.get(18).get(0).add("recursion");
        /////////////////////////////////
        this.pasos.get(18).get(1).add("(cuadrados 1 1)");
        this.pasos.get(18).get(1).add("(defun cuadrados(n c)");
        this.pasos.get(18).get(1).add("(if(> n 11)");
        this.pasos.get(18).get(1).add("(void)");
        this.pasos.get(18).get(1).add("(begin");
        this.pasos.get(18).get(1).add("(print \"~d \" c)");
        this.pasos.get(18).get(1).add("(cuadrados (+ n 1) ( * n n))");
        this.pasos.get(18).get(1).add("(defun cuadrados(n c)");
        this.pasos.get(18).get(1).add("(if(> n 11)");
        this.pasos.get(18).get(1).add("(void)");
        this.pasos.get(18).get(1).add("(begin");
        this.pasos.get(18).get(1).add("(print \"~d \" c)");
        this.pasos.get(18).get(1).add("(cuadrados (+ n 1) ( * n n))");
        this.pasos.get(18).get(1).add("(defun cuadrados(n c)");
        this.pasos.get(18).get(1).add("(if(> n 11)");
        this.pasos.get(18).get(1).add("(void)");
        this.pasos.get(18).get(1).add("(begin");
        this.pasos.get(18).get(1).add("(print \"~d \" c)");
        this.pasos.get(18).get(1).add("(cuadrados (+ n 1) ( * n n))");
        ////////////////   94    /////////////////
        this.algoritmos.get(19).add("#|\nConstruir un algoritmo en Lisp que muestre\nla  suma  de  los números pares entre 1 y 20 \nusando recursividad.\n|#");
        this.algoritmos.get(19).add("Funcion sumapar(n, c)\n    si(n > 20)\n        imprimir c\n    sino:\n        si(modulo(n, 2) = 0)\n           sumapar ((n + 1), c)\n        sino\n            sumapar ((n + 1) (n + c))\n\nllamar Funcion sumapar(0, 0)");
        this.algoritmos.get(19).add("(defun sumapar(n c)\n    (if(> n 20)\n        (print c)\n        (if (= (remainder n 2)0)\n            (sumapar (+ n 1) c)\n            (begin\n                (sumapar (+ n 2) (+ c n))\n            )\n        )\n   )\n)\n\n(sumapar 0 0)");
        this.algoritmos.get(19).add("93");
        this.pasos.get(19).get(0).add("Llamado");
        this.pasos.get(19).get(0).add("Funcion");
        this.pasos.get(19).get(0).add("Condicional");
        this.pasos.get(19).get(0).add("Impresión");
        this.pasos.get(19).get(0).add("CondiAnidado");
        this.pasos.get(19).get(0).add("recursion");
        this.pasos.get(19).get(0).add("agrupacion");
        this.pasos.get(19).get(0).add("recursion");
        this.pasos.get(19).get(0).add("Funcion");
        this.pasos.get(19).get(0).add("Condicional");
        this.pasos.get(19).get(0).add("Impresión");
        this.pasos.get(19).get(0).add("CondiAnidado");
        this.pasos.get(19).get(0).add("recursion");
        this.pasos.get(19).get(0).add("agrupacion");
        this.pasos.get(19).get(0).add("recursion");
        this.pasos.get(19).get(0).add("Funcion");
        this.pasos.get(19).get(0).add("Condicional");
        this.pasos.get(19).get(0).add("Impresión");
        this.pasos.get(19).get(0).add("CondiAnidado");
        this.pasos.get(19).get(0).add("recursion");
        this.pasos.get(19).get(0).add("agrupacion");
        this.pasos.get(19).get(0).add("recursion");
        /////////////////////////////////
        this.pasos.get(19).get(1).add("(sumapar 0 0)");
        this.pasos.get(19).get(1).add("(defun sumapar(n c)");
        this.pasos.get(19).get(1).add("(if(> n 20)");
        this.pasos.get(19).get(1).add("(print c)");
        this.pasos.get(19).get(1).add("(if (= (remainder n 2)0)");
        this.pasos.get(19).get(1).add("(sumapar (+ n 1) c)");
        this.pasos.get(19).get(1).add("(begin");
        this.pasos.get(19).get(1).add("(sumapar (+ n 2) (+ c n))");
        this.pasos.get(19).get(1).add("(defun sumapar(n c)");
        this.pasos.get(19).get(1).add("(if(> n 20)");
        this.pasos.get(19).get(1).add("(print c)");
        this.pasos.get(19).get(1).add("(if (= (remainder n 2)0)");
        this.pasos.get(19).get(1).add("(sumapar (+ n 1) c)");
        this.pasos.get(19).get(1).add("(begin");
        this.pasos.get(19).get(1).add("(sumapar (+ n 2) (+ c n))");
        this.pasos.get(19).get(1).add("(defun sumapar(n c)");
        this.pasos.get(19).get(1).add("(if(> n 20)");
        this.pasos.get(19).get(1).add("(print c)");
        this.pasos.get(19).get(1).add("(if (= (remainder n 2)0)");
        this.pasos.get(19).get(1).add("(sumapar (+ n 1) c)");
        this.pasos.get(19).get(1).add("(begin");
        this.pasos.get(19).get(1).add("(sumapar (+ n 2) (+ c n))");
        ////////////////   95    /////////////////
        this.algoritmos.get(20).add("#|\nConstruir un algoritmo en Lisp que dados \ndos  enteros  M  y N diferentes, calcule la \nsuma  de  los números que hay entre ellos \nusando recursividad.\n|#");
        this.algoritmos.get(20).add("Funcion SumaRango(n, m, suma)\n    si(n > 11)\n        imprimir \"suma: \", suma\n    sino:\n        SumaRango((n + 1) (n + suma))\n\nllamar Funcion SumaRango((lectura), (lectura), 0)");
        this.algoritmos.get(20).add("(defun SumaRango(n m suma)\n    (if(> n m)\n        (print suma)\n        (begin\n            (SumaRango (+ n 1), m, (+ n suma))\n        )\n    )\n)\n\n(SumaRango (read) (read) 0)");
        this.algoritmos.get(20).add("94");
        this.pasos.get(20).get(0).add("Llamado");
        this.pasos.get(20).get(0).add("Lectura");
        this.pasos.get(20).get(0).add("Lectura");
        this.pasos.get(20).get(0).add("Funcion");
        this.pasos.get(20).get(0).add("Condicional");
        this.pasos.get(20).get(0).add("Impresión");
        this.pasos.get(20).get(0).add("agrupacion");
        this.pasos.get(20).get(0).add("recursion");
        this.pasos.get(20).get(0).add("Funcion");
        this.pasos.get(20).get(0).add("Condicional");
        this.pasos.get(20).get(0).add("Impresión");
        this.pasos.get(20).get(0).add("agrupacion");
        this.pasos.get(20).get(0).add("recursion");
        this.pasos.get(20).get(0).add("Funcion");
        this.pasos.get(20).get(0).add("Condicional");
        this.pasos.get(20).get(0).add("Impresión");
        this.pasos.get(20).get(0).add("agrupacion");
        this.pasos.get(20).get(0).add("recursion");
        /////////////////////////////////
        this.pasos.get(20).get(1).add("(SumaRango (read) (read) 0)");
        this.pasos.get(20).get(1).add("(read");
        this.pasos.get(20).get(1).add("(read");
        this.pasos.get(20).get(1).add("(defun SumaRango(n m suma)");
        this.pasos.get(20).get(1).add("(if(> n m)");
        this.pasos.get(20).get(1).add("(print suma)");
        this.pasos.get(20).get(1).add("(begin");
        this.pasos.get(20).get(1).add("(SumaRango (+ n 1), m, (+ n suma))");
        this.pasos.get(20).get(1).add("(defun SumaRango(n m suma)");
        this.pasos.get(20).get(1).add("(if(> n m)");
        this.pasos.get(20).get(1).add("(print suma)");
        this.pasos.get(20).get(1).add("(begin");
        this.pasos.get(20).get(1).add("(SumaRango (+ n 1), m, (+ n suma))");
        this.pasos.get(20).get(1).add("(defun SumaRango(n m suma)");
        this.pasos.get(20).get(1).add("(if(> n m)");
        this.pasos.get(20).get(1).add("(print suma)");
        this.pasos.get(20).get(1).add("(begin");
        this.pasos.get(20).get(1).add("(SumaRango (+ n 1), m, (+ n suma))");
        ////////////////   96    /////////////////
        this.algoritmos.get(21).add("#|\nConstruir un algoritmo en Lisp que muestre\ny  cuente  los  elementos  que hay en la lista \nusando recursividad.\n|#");
        this.algoritmos.get(21).add("Funcion MostrarLista(a, tam, lista)\n    si(a > tam)\n        \"no hace nada\"\n    sino:\n        simprimir a, \": \", lista[a]\n        MostrarLista((a + 1), tam, lista) \n	\n\nFuncion ContarElementos\n    inicializar lista {\n       \"Jose\",22,\"alfonso\",66,23,\"Esteban\"\n    }\n    MostrarLista(0, tamaño(lista), lista)\n	\nllamar Funcion ContarElementos");
        this.algoritmos.get(21).add("(defun MostrarLista(a tam lista)\n    (if (> a tam)\n        (void)\n        (begin\n            (print \"~c: ~c\" a (list-ref lista a))\n             (MostrarLista(+ a 1) tam lista)\n        )\n    )\n)\n\n(defun ContarElementos()\n  (setq lista \n    (list \"juan\" 23 \"alonso\" \"jimena\" 23 \"Salome\")\n  )\n  (setq tam (length lista))\n  (MostrarLista 0 tam lista)\n)\n\n(ContarElementos)");
        this.algoritmos.get(21).add("95");
        this.pasos.get(21).get(0).add("Llamado");
        this.pasos.get(21).get(0).add("Funcion");
        this.pasos.get(21).get(0).add("Asignación");
        this.pasos.get(21).get(0).add("lista");
        this.pasos.get(21).get(0).add("Asignación");
        this.pasos.get(21).get(0).add("Llamado");
        this.pasos.get(21).get(0).add("Funcion");
        this.pasos.get(21).get(0).add("Condicional");
        this.pasos.get(21).get(0).add("Vacio");
        this.pasos.get(21).get(0).add("agrupacion");
        this.pasos.get(21).get(0).add("Impresión");
        this.pasos.get(21).get(0).add("recursion");
        this.pasos.get(21).get(0).add("Funcion");
        this.pasos.get(21).get(0).add("Condicional");
        this.pasos.get(21).get(0).add("Vacio");
        this.pasos.get(21).get(0).add("agrupacion");
        this.pasos.get(21).get(0).add("Impresión");
        this.pasos.get(21).get(0).add("recursion");
        this.pasos.get(21).get(0).add("Funcion");
        this.pasos.get(21).get(0).add("Condicional");
        this.pasos.get(21).get(0).add("Vacio");
        this.pasos.get(21).get(0).add("agrupacion");
        this.pasos.get(21).get(0).add("Impresión");
        this.pasos.get(21).get(0).add("recursion");
        /////////////////////////////////
        this.pasos.get(21).get(1).add("(ContarElementos)");
        this.pasos.get(21).get(1).add("(defun ContarElementos()");
        this.pasos.get(21).get(1).add("(setq lista ");
        this.pasos.get(21).get(1).add("(list \"juan\" 23 \"alonso\" \"jimena\" 23 \"Salome\")");
        this.pasos.get(21).get(1).add("(setq tam (length lista))");
        this.pasos.get(21).get(1).add("(MostrarLista 0 tam lista)");
        this.pasos.get(21).get(1).add("(defun MostrarLista(a tam lista)");
        this.pasos.get(21).get(1).add("(if (> a tam)");
        this.pasos.get(21).get(1).add("(void)");
        this.pasos.get(21).get(1).add("(begin");
        this.pasos.get(21).get(1).add("(print \"~c: ~c\" a (list-ref lista a))");
        this.pasos.get(21).get(1).add("(MostrarLista (+ a 1) tam lista)");
        this.pasos.get(21).get(1).add("(defun MostrarLista(a tam lista)");
        this.pasos.get(21).get(1).add("(if (> a tam)");
        this.pasos.get(21).get(1).add("(void)");
        this.pasos.get(21).get(1).add("(begin");
        this.pasos.get(21).get(1).add("(print \"~c: ~c\" a (list-ref lista a))");
        this.pasos.get(21).get(1).add("(MostrarLista (+ a 1) tam lista)");
        this.pasos.get(21).get(1).add("(defun MostrarLista(a tam lista)");
        this.pasos.get(21).get(1).add("(if (> a tam)");
        this.pasos.get(21).get(1).add("(void)");
        this.pasos.get(21).get(1).add("(begin");
        this.pasos.get(21).get(1).add("(print \"~c: ~c\" a (list-ref lista a))");
        this.pasos.get(21).get(1).add("(MostrarLista (+ a 1) tam lista)");
        ////////////////   97    /////////////////
        this.algoritmos.get(22).add("#|\nConstruir un algoritmo en Lisp que invierta \nlos datos de una lista usando recursividad.\n|#");
        this.algoritmos.get(22).add("global invertida = hacer-lista(10)\n\nFuncion Invertir(a, tam, lista)\n     si(tam = 0)\n        imprimir \"Lista invertida: \", invertida\n    sino:\n        invertida[a] = lista[tam] \n        Invertir((+ a 1), (- tam 1), lista)\n\n\nFuncion mainLista\n    inicializar lista {1,2,3,4,5,6,7,8,9,10}\n	inicializar tam = tamaño(lista)\n    Invertir(0, tam, lista)\n\n\nllamar Funcion mainLista");
        this.algoritmos.get(22).add("(defvar invertida (make-lista (10)))\n\n(defun Invertir(a tam lista)\n    (if (= tam 0)\n        (print \"Lista invertida: \" invertida)\n        (begin\n            (setf invertida a \n                (list-ref lista tam)\n            )\n            (Invertir (+ a 1) (- tam 1) lista)\n        )\n    )\n)\n\n(defun mainLista()\n    (setq lista (list 1 2 3 4 5 6 7 8 9 10))\n    (setq tam (length lista))\n    (Invertir(0 tam lista))\n)\n\n(mainLista)");
        this.algoritmos.get(22).add("96");
        this.pasos.get(22).get(0).add("Defvar");
        this.pasos.get(22).get(0).add("Llamado");
        this.pasos.get(22).get(0).add("Funcion");
        this.pasos.get(22).get(0).add("Asignación");
        this.pasos.get(22).get(0).add("lista");
        this.pasos.get(22).get(0).add("Asignación");
        this.pasos.get(22).get(0).add("Llamado");
        this.pasos.get(22).get(0).add("Funcion");
        this.pasos.get(22).get(0).add("Condicional");
        this.pasos.get(22).get(0).add("Impresión");
        this.pasos.get(22).get(0).add("agrupacion");
        this.pasos.get(22).get(0).add("asignarcad");
        this.pasos.get(22).get(0).add("recursion");
        this.pasos.get(22).get(0).add("Funcion");
        this.pasos.get(22).get(0).add("Condicional");
        this.pasos.get(22).get(0).add("Impresión");
        this.pasos.get(22).get(0).add("agrupacion");
        this.pasos.get(22).get(0).add("asignarcad");
        this.pasos.get(22).get(0).add("recursion");
        this.pasos.get(22).get(0).add("Funcion");
        this.pasos.get(22).get(0).add("Condicional");
        this.pasos.get(22).get(0).add("Impresión");
        this.pasos.get(22).get(0).add("agrupacion");
        this.pasos.get(22).get(0).add("asignarcad");
        this.pasos.get(22).get(0).add("recursion");
        /////////////////////////////////
        this.pasos.get(22).get(1).add("(defvar invertida (make-lista (10)))");
        this.pasos.get(22).get(1).add("(mainLista)");
        this.pasos.get(22).get(1).add("(defun mainLista()");
        this.pasos.get(22).get(1).add("(setq lista (list 1 2 3 4 5 6 7 8 9 10))");
        this.pasos.get(22).get(1).add("(list 1 2 3 4 5 6 7 8 9 10)");
        this.pasos.get(22).get(1).add("(setq tam (length lista))");
        this.pasos.get(22).get(1).add("(Invertir(0 tam lista))");
        this.pasos.get(22).get(1).add("(defun Invertir(a tam lista)");
        this.pasos.get(22).get(1).add("(if (> count 20)");
        this.pasos.get(22).get(1).add("(print \"Lista invertida: \" invertida)");
        this.pasos.get(22).get(1).add("(begin");
        this.pasos.get(22).get(1).add("(setf invertida a ");
        this.pasos.get(22).get(1).add("(Invertir (+ a 1) (- tam 1) lista)");
        this.pasos.get(22).get(1).add("(defun Invertir(a tam lista)");
        this.pasos.get(22).get(1).add("(if (> count 20)");
        this.pasos.get(22).get(1).add("(print \"Lista invertida: \" invertida)");
        this.pasos.get(22).get(1).add("(begin");
        this.pasos.get(22).get(1).add("(setf invertida a ");
        this.pasos.get(22).get(1).add("(Invertir (+ a 1) (- tam 1) lista)");
        this.pasos.get(22).get(1).add("(defun Invertir(a tam lista)");
        this.pasos.get(22).get(1).add("(if (> count 20)");
        this.pasos.get(22).get(1).add("(print \"Lista invertida: \" invertida)");
        this.pasos.get(22).get(1).add("(begin");
        this.pasos.get(22).get(1).add("(setf invertida a ");
        this.pasos.get(22).get(1).add("(Invertir (+ a 1) (- tam 1) lista)");
        ////////////////   98    /////////////////
        this.algoritmos.get(23).add("#|\nConstruir un algoritmo en Lisp que imprima \ny sume la serie de números 3,6,9,12,15... en\nun vector usando recursividad. \n|#");
        this.algoritmos.get(23).add("global series = hacer-vector(20)\n\nFuncion Serie3(a, count)\n    si(count > 20)\n        \"no hace nada\"\n    sino:\n        series[a] = count\n        Serie3((a + 1) (count + 3))\n\nFuncion SerieTresVector\n    inicializar numeros = hacer-vector(20)\n    Serie3(1, 3)\n    imprimir \"El vector es: \", series\n\nllamar Funcion SerieTresVector");
        this.algoritmos.get(23).add("(defvar series (make-vector 20))\n\n(defun Serie3(a count)\n    (if (> count 20)\n        (void)\n        (begin\n            (vector-set series a (count))\n            (Serie3 (+ a 1) (+ count 3))\n        )\n    )\n)\n\n(defun SerieTresVector()\n    (setq nuemros (make-vector 20))\n    (Serie3 1 3)\n    (print \"El vector es: \" series)\n)\n\n(SerieTresVector)");
        this.algoritmos.get(23).add("97");
        this.pasos.get(23).get(0).add("Defvar");
        this.pasos.get(23).get(0).add("Llamado");
        this.pasos.get(23).get(0).add("Funcion");
        this.pasos.get(23).get(0).add("Asignación");
        this.pasos.get(23).get(0).add("Llamado");
        this.pasos.get(23).get(0).add("Funcion");
        this.pasos.get(23).get(0).add("Condicional");
        this.pasos.get(23).get(0).add("Vacio");
        this.pasos.get(23).get(0).add("agrupacion");
        this.pasos.get(23).get(0).add("Actualizarvector");
        this.pasos.get(23).get(0).add("recursion");
        this.pasos.get(23).get(0).add("Funcion");
        this.pasos.get(23).get(0).add("Condicional");
        this.pasos.get(23).get(0).add("Vacio");
        this.pasos.get(23).get(0).add("agrupacion");
        this.pasos.get(23).get(0).add("Actualizarvector");
        this.pasos.get(23).get(0).add("recursion");
        this.pasos.get(23).get(0).add("Funcion");
        this.pasos.get(23).get(0).add("Condicional");
        this.pasos.get(23).get(0).add("Vacio");
        this.pasos.get(23).get(0).add("agrupacion");
        this.pasos.get(23).get(0).add("Actualizarvector");
        this.pasos.get(23).get(0).add("recursion");
        this.pasos.get(23).get(0).add("Impresión");
        /////////////////////////////////
        this.pasos.get(23).get(1).add("(defvar series (make-vector 20))");
        this.pasos.get(23).get(1).add("(SerieTresVector)");
        this.pasos.get(23).get(1).add("(defun SerieTresVector()");
        this.pasos.get(23).get(1).add("(setq nuemros (make-vector 20))");
        this.pasos.get(23).get(1).add("(Serie3 1 3)");
        this.pasos.get(23).get(1).add("(defun Serie3(a count)");
        this.pasos.get(23).get(1).add("(if (> count 20)");
        this.pasos.get(23).get(1).add("(void)");
        this.pasos.get(23).get(1).add("(begin");
        this.pasos.get(23).get(1).add("(vector-set series a (count))");
        this.pasos.get(23).get(1).add("(Serie3 (+ a 1) (+ count 3))");
        this.pasos.get(23).get(1).add("(defun Serie3(a count)");
        this.pasos.get(23).get(1).add("(if (> count 20)");
        this.pasos.get(23).get(1).add("(void)");
        this.pasos.get(23).get(1).add("(begin");
        this.pasos.get(23).get(1).add("(vector-set series a (count))");
        this.pasos.get(23).get(1).add("(Serie3 (+ a 1) (+ count 3))");
        this.pasos.get(23).get(1).add("(defun Serie3(a count)");
        this.pasos.get(23).get(1).add("(if (> count 20)");
        this.pasos.get(23).get(1).add("(void)");
        this.pasos.get(23).get(1).add("(begin");
        this.pasos.get(23).get(1).add("(vector-set series a (count))");
        this.pasos.get(23).get(1).add("(Serie3 (+ a 1) (+ count 3))");
        this.pasos.get(23).get(1).add("(print \"El vector es: \" series)")
        ;////////////////   99    /////////////////
        this.algoritmos.get(24).add("#|\nConstruir un algoritmo en Lisp que ingrese \nen  un  vector  los números del 1 al 8 y los \neleve  al  cuadrado  en  otro vector usando\nrecursividad. \n|#");
        this.algoritmos.get(24).add("global cuadrado = hacer-vector(8)\n\nFuncion Cuadrados(a, numeros)\n    inicializar valor = 0\n    si(a > tamaño(numeros))\n        imprimir \"Vector al cuadrado: \", cuadrado\n    sino:\n        valor = nuemros[a]\n        cuadrado[a] = valor * valor\n        Cuadrados((a + 1) nuemros)\n\nFuncion vectorCuadrado\n    inicializar numeros = hacer-vector(1, 2, 3, 4, 5, 6, 7, 8)\n    Cuadrados(0, nuemros, 0)\n\nllamar Funcion vectorCuadrado");
        this.algoritmos.get(24).add("(defvar cuadrado (make-vector 8))\n\n(defun Cuadrados(a nuemros)\n    (setq valor 0)\n    (if (> a (length numeros))\n        (print \"Vector al cuadrado: ~d\" cuadrado)\n        (begin\n            (set valor (vector-ref numeros a))\n            (vector-set cuadrado\n                a (* valor valor)\n            )\n            (Cuadrados (+ a 1) nuemros )\n        )\n    )\n)\n\n(defun vectorCuadrado()\n    (setq nuemros \n       (make-vector (1 2 3 4 5 6 7 8))\n    )\n    (Cuadrados(0 nuemros 0))\n)\n\n(vectorCuadrado)");
        this.algoritmos.get(24).add("98");
        this.pasos.get(24).get(0).add("Defvar");
        this.pasos.get(24).get(0).add("Llamado");
        this.pasos.get(24).get(0).add("Funcion");
        this.pasos.get(24).get(0).add("Asignación");
        this.pasos.get(24).get(0).add("hacervector");
        this.pasos.get(24).get(0).add("Llamado");
        this.pasos.get(24).get(0).add("Funcion");
        this.pasos.get(24).get(0).add("Asignación");
        this.pasos.get(24).get(0).add("Condicional");
        this.pasos.get(24).get(0).add("Impresión");
        this.pasos.get(24).get(0).add("agrupacion");
        this.pasos.get(24).get(0).add("Actualizar");
        this.pasos.get(24).get(0).add("Actualizarvector");
        this.pasos.get(24).get(0).add("recursion");
        this.pasos.get(24).get(0).add("Funcion");
        this.pasos.get(24).get(0).add("Asignación");
        this.pasos.get(24).get(0).add("Condicional");
        this.pasos.get(24).get(0).add("Impresión");
        this.pasos.get(24).get(0).add("agrupacion");
        this.pasos.get(24).get(0).add("Actualizar");
        this.pasos.get(24).get(0).add("Actualizarvector");
        this.pasos.get(24).get(0).add("recursion");
        this.pasos.get(24).get(0).add("Funcion");
        this.pasos.get(24).get(0).add("Asignación");
        this.pasos.get(24).get(0).add("Condicional");
        this.pasos.get(24).get(0).add("Impresión");
        this.pasos.get(24).get(0).add("agrupacion");
        this.pasos.get(24).get(0).add("Actualizar");
        this.pasos.get(24).get(0).add("Actualizarvector");
        this.pasos.get(24).get(0).add("recursion");
        /////////////////////////////////
        this.pasos.get(24).get(1).add("(defvar cuadrado (make-vector 8))");
        this.pasos.get(24).get(1).add("(vectorCuadrado)");
        this.pasos.get(24).get(1).add("(defun vectorCuadrado()");
        this.pasos.get(24).get(1).add("(setq nuemros ");
        this.pasos.get(24).get(1).add("(make-vector (1 2 3 4 5 6 7 8))");
        this.pasos.get(24).get(1).add("(Cuadrados(0 nuemros 0))");
        this.pasos.get(24).get(1).add("(defun Cuadrados(a nuemros)");
        this.pasos.get(24).get(1).add("(setq valor 0)");
        this.pasos.get(24).get(1).add("(if (> a (length numeros))");
        this.pasos.get(24).get(1).add("(print \"Vector al cuadrado: ~d\" cuadrado)");
        this.pasos.get(24).get(1).add("(begin");
        this.pasos.get(24).get(1).add("(set valor (vector-ref numeros a))");
        this.pasos.get(24).get(1).add("(vector-set cuadrado");
        this.pasos.get(24).get(1).add("(Cuadrados (+ a 1) nuemros )");
        this.pasos.get(24).get(1).add("(defun Cuadrados(a nuemros)");
        this.pasos.get(24).get(1).add("(setq valor 0)");
        this.pasos.get(24).get(1).add("(if (> a (length numeros))");
        this.pasos.get(24).get(1).add("(print \"Vector al cuadrado: ~d\" cuadrado)");
        this.pasos.get(24).get(1).add("(begin");
        this.pasos.get(24).get(1).add("(set valor (vector-ref numeros a))");
        this.pasos.get(24).get(1).add("(vector-set cuadrado");
        this.pasos.get(24).get(1).add("(Cuadrados (+ a 1) nuemros )");
        this.pasos.get(24).get(1).add("(defun Cuadrados(a nuemros)");
        this.pasos.get(24).get(1).add("(setq valor 0)");
        this.pasos.get(24).get(1).add("(if (> a (length numeros))");
        this.pasos.get(24).get(1).add("(print \"Vector al cuadrado: ~d\" cuadrado)");
        this.pasos.get(24).get(1).add("(begin");
        this.pasos.get(24).get(1).add("(set valor (vector-ref numeros a))");
        this.pasos.get(24).get(1).add("(vector-set cuadrado");
        this.pasos.get(24).get(1).add("(Cuadrados (+ a 1) nuemros )");
        ////////////////   100    /////////////////
        this.algoritmos.get(25).add("#|\nConstruir un algoritmo en Lisp que dado un \nvector con solo números,  realizar  la  suma \nde sus elementos usando recursividad.\n|#");
        this.algoritmos.get(25).add("Funcion Suma(a, numeros, suma)\n    si(a > tamaño(numeros))\n        suma\n    sino:\n        actualizar suma = suma + numeros[a]\n        Suma((a + 1) nuemros suma)\n\n\nFuncion SumarVector\n    inicializar numeros = hacer-vector  (5, aleatorio(10))\n    inicializar suma = 0\n    imprimir \"Vector: \", numeros\n    desde i = 0 hasta tamaño(numeros) hacer:\n        suma = suma + numeros[i]\n    imprimir \"Suma datos Vector: \", suma\n	\nllamar Funcion SumarVector");
        this.algoritmos.get(25).add("(defun Suma(a nuemros suma)\n    (if (> a (length numeros))\n      suma\n      (begin\n         (set suma (+ suma (vector-ref numeros a)))\n         (Suma (+ a 1) nuemros suma)\n       )\n    )\n)\n\n(defun SumarVector()\n  (vector numeros (1 4 12 27 8))\n  (print \"Vector: ~d\" numeros)\n  (print \"Suma datos Vector: ~d\" (Suma(0 numeros 0)))\n)\n\n\n(SumarVector)");
        this.algoritmos.get(25).add("99");
        this.pasos.get(25).get(0).add("Llamado");
        this.pasos.get(25).get(0).add("Funcion");
        this.pasos.get(25).get(0).add("vector");
        this.pasos.get(25).get(0).add("Impresión");
        this.pasos.get(25).get(0).add("Impresión");
        this.pasos.get(25).get(0).add("Llamado");
        this.pasos.get(25).get(0).add("Funcion");
        this.pasos.get(25).get(0).add("Condicional");
        this.pasos.get(25).get(0).add("retorno");
        this.pasos.get(25).get(0).add("agrupacion");
        this.pasos.get(25).get(0).add("Actualizar");
        this.pasos.get(25).get(0).add("recursion");
        this.pasos.get(25).get(0).add("Funcion");
        this.pasos.get(25).get(0).add("Condicional");
        this.pasos.get(25).get(0).add("retorno");
        this.pasos.get(25).get(0).add("agrupacion");
        this.pasos.get(25).get(0).add("Actualizar");
        this.pasos.get(25).get(0).add("recursion");
        this.pasos.get(25).get(0).add("Funcion");
        this.pasos.get(25).get(0).add("Condicional");
        this.pasos.get(25).get(0).add("retorno");
        this.pasos.get(25).get(0).add("agrupacion");
        this.pasos.get(25).get(0).add("Actualizar");
        this.pasos.get(25).get(0).add("recursion");
        /////////////////////////////////
        this.pasos.get(25).get(1).add("(SumarVector)");
        this.pasos.get(25).get(1).add("(defun SumarVector()");
        this.pasos.get(25).get(1).add("(vector numeros (1 4 12 27 8))");
        this.pasos.get(25).get(1).add("(print \"Vector: ~d\" numeros)");
        this.pasos.get(25).get(1).add("(print \"Suma datos Vector: ~d\" Suma(0 numeros 0))");
        this.pasos.get(25).get(1).add("(Suma(0 numeros 0))");
        this.pasos.get(25).get(1).add("(defun Suma(a nuemros suma)");
        this.pasos.get(25).get(1).add("(if (> a (length numeros))");
        this.pasos.get(25).get(1).add("suma");
        this.pasos.get(25).get(1).add("(begin");
        this.pasos.get(25).get(1).add("(set suma (+ suma (vector-ref numeros a)))");
        this.pasos.get(25).get(1).add("(Suma (+ a 1) nuemros suma)");
        this.pasos.get(25).get(1).add("(defun Suma(a nuemros suma)");
        this.pasos.get(25).get(1).add("(if (> a (length numeros))");
        this.pasos.get(25).get(1).add("suma");
        this.pasos.get(25).get(1).add("(begin");
        this.pasos.get(25).get(1).add("(set suma (+ suma (vector-ref numeros a)))");
        this.pasos.get(25).get(1).add("(Suma (+ a 1) nuemros suma)");
        this.pasos.get(25).get(1).add("(defun Suma(a nuemros suma)");
        this.pasos.get(25).get(1).add("(if (> a (length numeros))");
        this.pasos.get(25).get(1).add("suma");
        this.pasos.get(25).get(1).add("(begin");
        this.pasos.get(25).get(1).add("(set suma (+ suma (vector-ref numeros a)))");
        this.pasos.get(25).get(1).add("(Suma (+ a 1) nuemros suma)");
        /*
        ////////////////   N    /////////////////
        this.algoritmos.get(posn).add("");
        this.algoritmos.get(posn).add("");
        this.algoritmos.get(posn).add("");
        this.algoritmos.get(posn).add("");
        this.pasos.get(posn).get(0).add("");
        this.pasos.get(posn).get(0).add("");
        this.pasos.get(posn).get(0).add("");
        /////////////////////////////////
        this.pasos.get(posn).get(1).add("");
        this.pasos.get(posn).get(1).add("");
        this.pasos.get(posn).get(1).add("");
        */
    }

    public List<List<String>> getAlgoritmos() {
        return algoritmos;
    }

    public List<List<List<String>>> getPasos() {
        return pasos;
    }
}
